package culturelandFront.controller.front.purchase;
/**
 * 매입처리관리
 * */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.simple.JSONObject;
import org.springframework.mobile.device.Device;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import culturelandFront.core.abstr.NdnAbstractController;
import culturelandFront.core.util.FilesUtil;
import culturelandFront.core.util.NdnUtil;
import culturelandFront.core.util.PropUtil;
import culturelandFront.core.value.JavaScript;
import culturelandFront.service.AccountService;
import culturelandFront.service.BoardService;
import culturelandFront.service.FileMngService;
import culturelandFront.service.PurchaseService;
import culturelandFront.vo.FileVO;
import culturelandFront.vo.UserVO;
import egovframework.rte.fdl.idgnr.EgovIdGnrService;




@Controller
@RequestMapping({"/purchase", "/m/purchase"})
public class PurchaseController extends NdnAbstractController{

	private final Logger logger = Logger.getLogger(this.getClass());
	
	@Resource
	private PurchaseService purchaseService;
	
	@Resource
	private AccountService accountService;
	
	@Resource
	private BoardService boardService;
	
	@Resource
	private FileMngService fileMngService;
	
	/** fileGnrService */
    @Resource(name="fileGnrService")
    private EgovIdGnrService fileGnrService;
	
	/**
	 * 일반 매입신청 화면
	 * */
	@RequestMapping("/apply.do")
	public String purchaseApply(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		
		UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
		param.put("memberNo",user.getMemberNo());
		
		HashMap accountInfo = (HashMap)accountService.getSelectAccountDetail(param);
		
		//계좌인증이 안된 회원
		if(accountInfo == null || !"Y".equals(accountInfo.get("CONFIRM_YN"))){
			JavaScript javaScript = new JavaScript();
			javaScript.message("상품권 매입 신청은 계좌 인증 후 가능합니다.");
			javaScript.script("location.href = '/myPage/accountVerifi.do'");
		
			return goScript(javaScript);
		}
		
		
		
		//수수료 조회
		double charge = boardService.selectCharge(param);
		model.addAttribute("charge", charge);
		
		if(device.isMobile()){			//모바일에서 접속 시
			return "/mobile/purchase/apply";
		}else{
			return "/front/purchase/apply";
		}
	}
	
	/**
	 * 일반 매입신청 프로세스 및 결과 화면
	 * */
	@RequestMapping("/finCodeConFirm.json")
	@ResponseBody
	public String finCodeConFirm(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		
		JSONObject obj = new JSONObject();
		int buySeq = 0;
//		System.out.println("param : " + param.toString());
		UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
		param.put("memberNo",user.getMemberNo());
		
		HashMap accountInfo = (HashMap)accountService.getSelectAccountDetail(param);
		
		//계좌인증이 안된 회원
		if(accountInfo == null || !"Y".equals(accountInfo.get("CONFIRM_YN"))){
			obj.put("result", "acntError");
			return obj.toString();
		}
		
		param.put("acntNumber", accountInfo.get("ACNT_NUMBER"));
		param.put("bankName", accountInfo.get("BANK_NAME"));
		param.put("memberNo", user.getMemberNo());
		param.put("memberName", user.getName());
		//입금여부(N으로 초기값을 맞춘 이유는 상품권코드 특성 상 코드 확인 즉시 더이상 상품권코드를 입력 할 수 없기 때문에 매입요청을 완료 시 Y로 수정하기 위해서 이다)
		//상품권 코드만 입력하고 화면 종료 시 입금이 안되고 상품권은 더이상 입력이 안되기 때문에 우선 N처리를 한다. 추후 N처리 인것들에 대해서 사용자에게 알림이 필요해 보임
		param.put("depositYn", "N");
		
		//매입 신청 등록
		purchaseService.insertBuy(param);
		buySeq = (int) param.get("buySeq");
		
		obj.put("buySeq", buySeq);
//		System.out.println("buySeq : " + buySeq);
		
		//수수료 조회
		double charge = boardService.selectCharge(param);
//		System.out.println("charge : " + charge);
		
		String[] codeArr = param.get("finCodeArr").toString().split("\\|");
		
		List<HashMap<String,Object>> finList = new ArrayList<HashMap<String,Object>>();
		
		for(int i = 0; i < codeArr.length; i++){
			HashMap<String,Object> map = new HashMap<String,Object>();
			HashMap<String,Object> resultMap = new HashMap<String,Object>();	//인증 결과를 담을 Map
			String checkCode = "";			//사용자에게 받은 코드
			String failText = "";			//실패시 실패이유
			String successYn = "Y";			//인증 성공여부 (Y : 성공, N : 실패)
			String reqMoney = "0";
			
			//온라인 문화상품권의 경우 18자리이고, 모바일 문화상품권의 경우 16자리이다.
			//다만 인증할수 있는 핀코드는 16자리이기 때문에 온라인 문화상품권의 코드 맨 앞자리 2개를 자르고 인증을 해야 한다.
			if("W".equals( param.get("giftGubun").toString())){
				checkCode = codeArr[i].replaceAll("-", "").substring(2);
			}else{
				checkCode = codeArr[i].replaceAll("-", "");
			}
			
			resultMap = finCodeCheck(checkCode);		//finCode 인증
			
			String resultCode = resultMap.get("resultCode").toString();
			String returnMsg = resultMap.get("returnMsg").toString();
//			System.out.println("return returnMsg : " + returnMsg);
			//0000은 정상처리 되었기 때문에 실패이유를 조회하지 않는다.
			if(!"0000".equals(resultCode)){
				failText = failCodeStr(resultCode);
				successYn = "N";
				map.put("purchaseMoney", "0");
			}else{
				double purMoney = 0;
				
				//성공했을 경우에만 핀코드의 금액을 반환해주며 결과 메세지의 뒤에서 9번쨰자리까지 반환한다.
				reqMoney = NdnUtil.StrNum(returnMsg.substring(returnMsg.length() - 9, returnMsg.length()));
				purMoney = Integer.parseInt(reqMoney) - (Integer.parseInt(reqMoney) * 0.01 * charge);
				
				map.put("purchaseMoney", purMoney);
			}
			
//			System.out.println("reqMoney : " + reqMoney);
			map.put("buySeq", buySeq);
			map.put("finNumber", codeArr[i]);
			map.put("reqMoney", reqMoney);
			map.put("successYn", successYn);
			map.put("failCode", resultCode);
			map.put("failReason", failText);
			map.put("memberNo", user.getMemberNo());
			map.put("giftGubun", param.get("giftGubun"));
			finList.add(map);
		}
		
		for(int i = 0; i < finList.size(); i++){
			HashMap map = new HashMap();
			map = (HashMap)finList.get(i);
//			System.out.println(map.toString());
			
			//매입 상세 등록하기
			purchaseService.insertBuyDetail(map);
		}
		
		
		obj.put("result", "success");
		return obj.toString();
	}
	
	/**
	 * 일반 매입신청 결과 화면
	 * */
	@RequestMapping("/confirm.do")
	public String purConfirm(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		
		UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
		param.put("memberNo", user.getMemberNo());
		
		//매입 신청한 회원의 계좌정보
		HashMap accountInfo = (HashMap)accountService.getSelectAccountDetail(param);
		
//		System.out.println("param : " + param.toString());
		
		//매입 신청한 핀코드 인증 목록
		List purList = purchaseService.getSelectPurchaseBuyList(param);
		
		//매입 신청한 핀코드 인증 결과
		HashMap buyResult = (HashMap)purchaseService.getSelectPurchaseBuyResult(param);
		
		model.addAttribute("purList", purList);
		model.addAttribute("buyResult", buyResult);
		model.addAttribute("accountInfo", accountInfo);
		model.addAttribute("buySeq", param.get("buySeq"));
		model.addAttribute("menu_id", "02");
		model.addAttribute("sub_menu_id", "21");
		if(device.isMobile()){			//모바일에서 접속 시
			return "/mobile/purchase/confirm";
		}else{
			return "/front/purchase/confirm";
		}
	}
	
	/**
	 * 
	 * 입금완료 내역
	 * 
	 * */
	@RequestMapping("/complete.do")
	public String purchaseComplete(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
		param.put("memberNo", user.getMemberNo());
		
		//매입 신청한 회원의 계좌정보
		HashMap accountInfo = (HashMap)accountService.getSelectAccountDetail(param);
				
		//매입 신청한 핀코드 인증 결과
		HashMap buyResult = (HashMap)purchaseService.getSelectPurchaseBuyResult(param);
//		System.out.println("param : " + param.toString());
//		System.out.println("buyResult : " + buyResult.toString());
		
		//입금이 안되었을 때
		if(!"Y".equals(buyResult.get("DEPOSIT_YN"))){
			/**
			 * 입금 API 붙이기
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 * */
		}
		
		//입금여부
		param.put("gubun", "D");
		param.put("depositYn", "Y");
		
		//입금여부완료 수정
		purchaseService.updateCOBuy(param);
		
		model.addAttribute("accountInfo", accountInfo);
		model.addAttribute("buyResult", buyResult);
		model.addAttribute("menu_id", "02");
		model.addAttribute("sub_menu_id", "21");
		if(device.isMobile()){			//모바일에서 접속 시
			return "/mobile/purchase/complete";
		}else{
			return "/front/purchase/complete";
		}
	}
	
	/**
	 * 대용령 매입신청 화면
	 * */
	@RequestMapping("/largeApply.do")
	public String largeApply(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		model.addAttribute("menu_id", "02");
		model.addAttribute("sub_menu_id", "21");
		
		if(device.isMobile()){			//모바일에서 접속 시
			return "/mobile/purchase/largeApply";
		}else{
			return "/front/purchase/largeApply";
		}
	}
	
	/**
	 * 대용량 매입신청 프로세스 및 결과 화면
	 * */
	@RequestMapping("/largeFinCodeConFirm.json")
	@ResponseBody
	public String largeFinCodeConFirm(final MultipartHttpServletRequest multiRequest,
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		
		JSONObject obj = new JSONObject();
		int buySeq = 0;
		String atchFileId = "";
		
		final Map<String, MultipartFile> files = multiRequest.getFileMap();
		MultipartFile file1 = (MultipartFile) multiRequest.getFile("file_0");
		
		try {
			
			FileVO fvo = new FileVO();
			
			if (file1 != null &&  !file1.isEmpty()) {
				atchFileId = fileGnrService.getNextStringId();
				param.put("atchFileId", atchFileId);
				
				fvo =   FilesUtil.parseFileInfOne(file1, "PURC_", 0, atchFileId, "purc");
				
				fileMngService.insertFileInf(fvo);
			}else{
				obj.put("result", "fileError");
				return obj.toString();
			}
			
			List finCodeList = new ArrayList();
			
			//엑셀파일에 있는 핀코드 추출
			if(fvo != null){
				finCodeList = excelRead(PropUtil.get("image.web.upload.path") + fvo.getFileStreCours()+fvo.getStreFileNm());
			}
			
			for(int i = 0; i < finCodeList.size(); i++){
				HashMap map = new HashMap();
				map = (HashMap)finCodeList.get(i);
				System.out.println("map : " + map.toString());
			}
			
	//		System.out.println("param : " + param.toString());
			UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
			param.put("memberNo",user.getMemberNo());
			
			HashMap accountInfo = (HashMap)accountService.getSelectAccountDetail(param);
			
			//계좌인증이 안된 회원
			if(accountInfo == null || !"Y".equals(accountInfo.get("CONFIRM_YN"))){
				obj.put("result", "acntError");
				return obj.toString();
			}
			
			param.put("acntNumber", accountInfo.get("ACNT_NUMBER"));
			param.put("bankName", accountInfo.get("BANK_NAME"));
			param.put("memberNo", user.getMemberNo());
			param.put("memberName", user.getName());
			//입금여부(N으로 초기값을 맞춘 이유는 상품권코드 특성 상 코드 확인 즉시 더이상 상품권코드를 입력 할 수 없기 때문에 매입요청을 완료 시 Y로 수정하기 위해서 이다)
			//상품권 코드만 입력하고 화면 종료 시 입금이 안되고 상품권은 더이상 입력이 안되기 때문에 우선 N처리를 한다. 추후 N처리 인것들에 대해서 사용자에게 알림이 필요해 보임
			param.put("depositYn", "N");
			
			//매입 신청 등록
			purchaseService.insertBuy(param);
			buySeq = (int) param.get("buySeq");
			
			obj.put("buySeq", buySeq);
	//		System.out.println("buySeq : " + buySeq);
			
			//수수료 조회
			double charge = boardService.selectCharge(param);
	//		System.out.println("charge : " + charge);
			
			List<HashMap<String,Object>> finList = new ArrayList<HashMap<String,Object>>();
			
			for(int i = 0; i < finCodeList.size(); i++){
				HashMap<String,Object> finMap = new HashMap<String,Object>();
				HashMap<String,Object> map = new HashMap<String,Object>();
				HashMap<String,Object> resultMap = new HashMap<String,Object>();	//인증 결과를 담을 Map
				String checkCode = "";			//사용자에게 받은 코드
				String failText = "";			//실패시 실패이유
				String successYn = "Y";			//인증 성공여부 (Y : 성공, N : 실패)
				String reqMoney = "0";
				String giftGubun = "";
				
				finMap = (HashMap<String, Object>)finCodeList.get(i);
				String excelFinCode = finMap.get("fincode").toString();
				
				//온라인 문화상품권의 경우 18자리이고, 모바일 문화상품권의 경우 16자리이다.
				//다만 인증할수 있는 핀코드는 16자리이기 때문에 온라인 문화상품권의 코드 맨 앞자리 2개를 자르고 인증을 해야 한다.
				if(excelFinCode.length() > 19){
					checkCode = excelFinCode.replaceAll("-", "").substring(2);
					giftGubun = "W";
				}else{
					checkCode = excelFinCode.replaceAll("-", "");
					giftGubun = "M";
				}
				
				resultMap = finCodeCheck(checkCode);		//finCode 인증
				
				String resultCode = resultMap.get("resultCode").toString();
				String returnMsg = resultMap.get("returnMsg").toString();
	//			System.out.println("return returnMsg : " + returnMsg);
				//0000은 정상처리 되었기 때문에 실패이유를 조회하지 않는다.
				if(!"0000".equals(resultCode)){
					failText = failCodeStr(resultCode);
					successYn = "N";
					map.put("purchaseMoney", "0");
				}else{
					double purMoney = 0;
					
					//성공했을 경우에만 핀코드의 금액을 반환해주며 결과 메세지의 뒤에서 9번쨰자리까지 반환한다.
					reqMoney = NdnUtil.StrNum(returnMsg.substring(returnMsg.length() - 9, returnMsg.length()));
					purMoney = Integer.parseInt(reqMoney) - (Integer.parseInt(reqMoney) * 0.01 * charge);
					
					map.put("purchaseMoney", purMoney);
				}
				
	//			System.out.println("reqMoney : " + reqMoney);
				map.put("buySeq", buySeq);
				map.put("finNumber", excelFinCode);
				map.put("reqMoney", reqMoney);
				map.put("successYn", successYn);
				map.put("failCode", resultCode);
				map.put("failReason", failText);
				map.put("memberNo", user.getMemberNo());
				map.put("giftGubun", giftGubun);
				finList.add(map);
			}
			
			for(int i = 0; i < finList.size(); i++){
				HashMap map = new HashMap();
				map = (HashMap)finList.get(i);
				System.out.println(map.toString());
				
				//대량 매입 상세 등록하기
				purchaseService.insertBuyLargeDetail(map);
			}
			
			obj.put("result", "success");
			
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return obj.toString();
	}
	
	/**
	 *대용량 매입신청 결과 화면
	 * */
	@RequestMapping("/largeComplete.do")
	public String largeConfirm(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model,
			Device device
			) {
		
		UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
		param.put("memberNo", user.getMemberNo());
		
		//매입 신청한 회원의 계좌정보
		HashMap accountInfo = (HashMap)accountService.getSelectAccountDetail(param);
		
//		System.out.println("param : " + param.toString());
		
		param.put("largeGubun", "Y");
		
		//매입 신청한 핀코드 인증 목록
		List purList = purchaseService.getSelectPurchaseBuyList(param);
		
		//매입 신청한 핀코드 인증 결과
		HashMap buyResult = (HashMap)purchaseService.getSelectPurchaseBuyResult(param);
		
		model.addAttribute("purList", purList);
		model.addAttribute("buyResult", buyResult);
		model.addAttribute("accountInfo", accountInfo);
		model.addAttribute("buySeq", param.get("buySeq"));
		model.addAttribute("menu_id", "02");
		model.addAttribute("sub_menu_id", "21");
		if(device.isMobile()){			//모바일에서 접속 시
			return "/mobile/purchase/largeComplete";
		}else{
			return "/front/purchase/largeComplete";
		}
	}
	
	public HashMap<String, Object> finCodeCheck(String code){
		String socketIp = PropUtil.get("fincode.check.ip");
		String HeadNo = "9110";
    	String MessageLength = "0442";
    	String MemberCode = "A009555     ";
    	String SubMemberCode = "cult                ";
//    	String TransNo = "201911120001";
//    	String SendDate = "20191210";
//    	String SendTime = "162601";
    	String TransNo = NdnUtil.getTimeStampString("yyyyMMddHHmm");				//추적시간 : 현재날짜시간으로 설정함
    	String SendDate = NdnUtil.getTimeStampString("yyyyMMdd");					//전송날짜 : 년월일
    	String SendTime = NdnUtil.getTimeStampString("HHmmss");						//전송시간 : 시분초
    	String UserId = "lsi135790606        ";
    	String CustId = "95413062    ";
    	String HashNo ="3700e7dd8b47abbcff7881fb8";
    	String gap = "                                                                                                                                                                                                                                                                                                                       "; 
    	String resultCode = "";
    	HashMap<String, Object> resultMap = new HashMap<String, Object>();
//    	String ScrachNo ="2100000465111111";
//    	System.out.println("getTimeStamp() : " + NdnUtil.getTimeStampString("yyyyMMddHHmm") );
//    	System.out.println("getTimeStamp() day : " + NdnUtil.getTimeStampString("yyyyMMdd"));
//    	System.out.println("getTimeStamp() hour : " + NdnUtil.getTimeStampString("HHmmss"));
//    	System.out.println("socketIp : " + socketIp);
//    	System.out.println("code : " + code);
    	
    	String codeCheckData = HeadNo + MessageLength + MemberCode + SubMemberCode + TransNo + SendDate + SendTime + UserId + CustId + HashNo + code + gap;
    	
    	
        try {
            //서버 접속
            Socket socket = new Socket(socketIp, 5984);

            //Server에 보낼 데이터 
            BufferedWriter bufWriter = 
            new BufferedWriter( new OutputStreamWriter( socket.getOutputStream()));
            
            // 전문 ID    submember  가맹점				 요청일자 회원 id 등등등									추적넘버		해시넘버				//  210000부터 상품권코드
            bufWriter.write(codeCheckData);
          //  bufWriter.newLine();
            bufWriter.flush();

            //Server가 보낸 데이터 출력
            BufferedReader bufReader =
            new BufferedReader( new InputStreamReader( socket.getInputStream(),"euc-kr"));
            
            String message = bufReader.readLine();
            resultCode = message.substring(66,70);
            System.out.println("Message : " + resultCode);
            
            resultMap.put("resultCode", resultCode);
            resultMap.put("returnMsg", message.replaceAll(" ", ""));
            
           /* String[] sp= message.split("");
            
            System.out.println("Message : " + sp[71] +sp[72]);*/

            System.out.println("Message : " + message );
            socket.close();
            bufReader.close();
            bufWriter.close();

          }

          catch( Exception e ){

            e.printStackTrace();

          }
		return resultMap;
	}
	
	public String failCodeStr(String code){
		String result = "";
		
		if("9101".equals(code)){
			result = "등록 되지 않은 업체코드";
		}else if("9102".equals(code)){
			result = "등록되지않거나 잘못된 스크래치번호";
		}else if("9103".equals(code)){
			result = "이미 사용된 스크래치번호";
		}else if("9104".equals(code)){
			result = "이미 상환된 스크래치번호";
		}else if("9105".equals(code)){
			result = "상환처리 입력중 에러";
		}else if("9106".equals(code)){
			result = "상품권원장 상태변경중 에러";
		}else if("9901".equals(code)){
			result = "요청전문형식오류";
		}else if("9902".equals(code)){
			result = "요청 중 COM에러";
		}
		
		return result;
	}
	
	/**
	 * 대용량 매입 엑셀파일 Read
	 * @param model
	 * @param session
	 * @param request
	 * @param param
	 * @param seq
	 * @return
	 * @throws Exception
	 */
	public List excelRead(String filePath) throws Exception{
		
		JSONObject obj = new JSONObject();
		int result = 0;
		
		HashMap resultMap = new HashMap();
		ArrayList list = new ArrayList();
		int listCount = 0;
		File file = new File(filePath);
		Workbook workbook = null;
		
		try {
			if (file.getName().toLowerCase().endsWith("xlsx")) { // 엑셀 파일의 확장자(버전)에 따라서 생성해야 할 Workbook 객체가 다르다.
				System.out.println("xlsx!!");
				workbook = new XSSFWorkbook(new FileInputStream(file));
			}else{
				System.out.println("xls!!");
				workbook = new HSSFWorkbook(new FileInputStream(file));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Sheet workSheet = workbook.getSheetAt(0); // 첫번째 Sheet
		Iterator<Row> rowIterator = workSheet.iterator();
		int rowSize = workSheet.getLastRowNum() + 1; // 행의 총 개수 (행은 0부터 시작함)
//		System.out.println("rowSize : " + rowSize);
		
		for(int i=1; i<rowSize; i++){ // i를 4부터 시작해야 두번째 행부터 데이터가 입력된다.
			Row row = workSheet.getRow(i);
//			System.out.println("row : " + row);
//			System.out.println("row : " + row.toString());
			HashMap map = new HashMap();
			
			map.put("fincode", row.getCell(0));
			
			list.add(map);
		} // for loop(i) end (Rows)
		
		return list;		
	}
}
