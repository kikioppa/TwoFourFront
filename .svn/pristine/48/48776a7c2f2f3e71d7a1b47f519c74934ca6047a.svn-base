package culturelandFront.controller.front;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
//import javax.validation.Valid;
import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import culturelandFront.core.abstr.NdnAbstractController;
import culturelandFront.core.tld.SiteFunction;
import culturelandFront.core.util.PropUtil;
import culturelandFront.service.AccountService;
import culturelandFront.service.LoginService;
import culturelandFront.vo.AdminUserVO;
import culturelandFront.vo.HistoryAdminloginVO;

@Controller
public class LoginController extends NdnAbstractController{

	private final Logger logger = Logger.getLogger(this.getClass());
	
	@Resource
	private LoginService loginService;
	
	@Resource
	private AccountService accountService;
	
	
	@RequestMapping({ADMIN_URI + "/login.do", ADMIN_URI})
	public String Test(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param ,
			Model model
			) {
		AdminUserVO adminUserVO = new AdminUserVO();
		model.addAttribute("adminUserVO", adminUserVO);
		
		return "/admin/login/login";
	}
	
	/**
	 * 관리자 로그인 세션 생성
	 * @param adminUser
	 * @param request
	 * @param session
	 * @param model
	 * @return
	 */
	@RequestMapping( ADMIN_URI + "/loginAction.do" )
	public String loginAction(@Valid AdminUserVO adminUserVO, BindingResult result ,  HttpServletRequest request,
			HttpSession session, Model model) {
		
		if (result.hasErrors()) {
            // 에러 출력
            List<ObjectError> list = result.getAllErrors();
            for (ObjectError e : list) {
            	logger.debug(" ObjectError : " + e);
            }
            
            model.addAttribute("adminUserVO", adminUserVO);
            return "/admin/login/login";
            
		}
		
		AdminUserVO admin = loginService.getAdminLogin(adminUserVO);
		
		if( admin == null) {
			//return goBack(getMsg("login.error"));
			/*
			JavaScript javaScript = new JavaScript();
			javaScript.message("아이디 또는 비밀번호가 올바르지 않습니다.");
			javaScript.script("history.back(-1);");
			return goScript(javaScript);
			*/
//			System.out.println("로그인실패");
			adminUserVO.setSuccess(false);
			result.rejectValue("success", "AssertTrue.adminUserVO.success");
			
			// 에러 출력
            List<ObjectError> list = result.getAllErrors();
            for (ObjectError e : list) {
            	logger.debug(" ObjectError : " + e);
            }
			
			model.addAttribute("adminUserVO", adminUserVO);
			 return "/admin/login/login";
			
		} else {
			session.setAttribute(PropUtil.get("session.admin"), admin);
			logAdmin(request, "LOGIN");
			
			// 사용자 세션 삭제
			session.setAttribute("loginVO", null);
			
			return "redirect:" + PropUtil.get("web.nomal.url") + PropUtil.get("url.admin_main");
		}
		
	}
	
	
	/**
	 * 관리자 로그아웃
	 * @param request
	 * @param session
	 * @param modl
	 * @return
	 */
	@RequestMapping( ADMIN_URI + "/logout.do" )
	public String logout(HttpServletRequest request, HttpSession session, Model modl) {
		
		logAdmin(request, "LOGOUT");
		
		session.setAttribute(PropUtil.get("session.admin"), null);
		session.invalidate();
		return goPage(ADMIN_URI+"/login.do");
	}

	
	private void logAdmin(HttpServletRequest request, String action) {
		Object sesObj = request.getSession().getAttribute(PropUtil.get("session.admin"));
		if( sesObj != null && sesObj instanceof AdminUserVO ) {
			
			
			AdminUserVO admin = (AdminUserVO)sesObj;
			HistoryAdminloginVO adminloginVO = new HistoryAdminloginVO(admin.getId());
			adminloginVO.setIp(request.getLocalAddr());
			adminloginVO.setAction(action);
			loginService.insertAdminLogin(adminloginVO);
		}
	}
	
	/**
	 * 비밀번호 변경
	 */
	@RequestMapping(ADMIN_URI+"/passwordMod.json")
	@ResponseBody
	public String write_proc( 
						ModelMap model,  
						HttpSession session, 
						HttpServletRequest request,
			 			@RequestParam Map param,
			 			
			 			@RequestParam (value="cur_pwd", defaultValue="")  String cur_pwd,
			 			
			 			@RequestParam (value="chg_pwd", defaultValue="")  String chg_pwd,
			 			@RequestParam (value="chg_pwd_re", defaultValue="")  String chg_pwd_re
			 			
			 		
					) throws Exception{
		
		AdminUserVO adminUser = (AdminUserVO)request.getSession().getAttribute(PropUtil.get("session.admin"));
		
		JSONObject obj = new JSONObject();
	
		int result = 0;
		String message = "";
		
		if ( !chg_pwd.equals(chg_pwd_re)){
			message = "입력하신 비밀번호와 확인 비밀번호가 다릅니다.";
			obj.put("message", message);
			obj.put("success", false);
			return obj.toString();
		}
	
		param.put("id", adminUser.getId());
		result = loginService.updatePassword(param);
		
		
		
		if (  "".equals(message) &&  result > 0 ){
			obj.put("success", true);
		}else{
			
			if ( "".equals(message)){
				message="입력하신 현재 비밀번호가 다릅니다.";
				
			}
			
			obj.put("message", message);
			obj.put("success", false);
		}
		return obj.toString();		
	}
	
	/**
	 * 게시판 글쓰기폼
	 * */
	@RequestMapping( ADMIN_URI + "/writeTemplate.do")
	public String write(
			HttpSession session,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam Map param,
			Model model
			) {
		
		AdminUserVO adminUser = (AdminUserVO)request.getSession().getAttribute(PropUtil.get("session.admin"));
		
		param.put("seq", adminUser.getSeq());
		
		HashMap detail = (HashMap)accountService.getSelectAccountDetail(param);
		
		model.addAttribute("detail", detail);
		
		return "/admin/login/write";
	}
	
	
	

	
}
