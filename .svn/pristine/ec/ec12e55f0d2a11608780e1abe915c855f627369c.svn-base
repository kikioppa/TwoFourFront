package culturelandFront.controller.front.contents;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import culturelandFront.core.abstr.NdnAbstractController;
import culturelandFront.core.helper.ListHelper;
import culturelandFront.core.util.FilesUtil;
import culturelandFront.core.util.PropUtil;
import culturelandFront.service.CategoryService;
import culturelandFront.service.ContentsService;
import culturelandFront.service.FileMngService;
import culturelandFront.vo.AdminUserVO;
import culturelandFront.vo.FileVO;
import egovframework.rte.fdl.idgnr.EgovIdGnrService;

/**
*
* 컨텐츠 관리 > 농촌관광
* 
**/
@Controller
@RequestMapping("/admin/contents/farm")
public class FarmController extends NdnAbstractController{

	private final Logger logger = Logger.getLogger(this.getClass());
	
	@Resource
	private ContentsService contentsService;
	
	@Resource
	private CategoryService categoryService;
	

	@Resource
	private FileMngService fileMngService;	
	
	/** fileGnrService */
    @Resource(name="fileGnrService")
    private EgovIdGnrService fileGnrService;
    
    /**
	 * 리스트 
	 * 
	 */
	@RequestMapping( "/list.do")
	public String list	(
						HttpServletRequest request
						, Model model
						, @RequestParam (required=false, defaultValue="C3")  String contents_gubun	 //  C1: 여행100선   C2: 토탈관광  C3:농촌관광
						, @RequestParam Map param) {
		
		param.put("contents_gubun", contents_gubun);
		
		ListHelper listHelper = new ListHelper(param, 15);
		listHelper = contentsService.selectContentsListHelper(listHelper);
		
		
		model.addAttribute("listHelper", listHelper);	
		
		model.addAttribute("menu_id", "01");
		model.addAttribute("sub_menu_id", "03");
		
		return  "/admin/contents/farm/list";
	}	
    

	
	/**
	 * 등록 및 수정 화면
	 * 
	 */
	@RequestMapping( "/write.do")
	public String write	(
						HttpServletRequest request
						, Model model
						, @RequestParam (required=false, defaultValue="")  String seq	
						, @RequestParam (required=false, defaultValue="C3")  String contents_gubun	 //  C1: 여행100선   C2: 토탈관광  C3:농촌관광
						
						, @RequestParam Map param) {
		
		
		// 2차 카테고리
		Map paramMap = new HashMap();
		paramMap.put("parent_code", "A");
		List category2List = categoryService.getSelectCategoryList(paramMap); 
		model.addAttribute("category2List", category2List);
		
		
		if ( !"".equals(seq)){
			
			param.put("contents_gubun", contents_gubun);
			param.put("seq", seq);
			
			Map detail = contentsService.selectContentsDetail(param);
			model.addAttribute("detail", detail);
			
		}
		
		
		model.addAttribute("menu_id", "01");
		model.addAttribute("sub_menu_id", "03");
		
		return  "/admin/contents/farm/write";
	}	

	/**
	  * 글쓰기
	  */
	@RequestMapping(value="/write_proc.json")
	@ResponseBody
	public String write_proc( final MultipartHttpServletRequest multiRequest,
						ModelMap model,  
						HttpSession session, 
						HttpServletRequest request,
			 			@RequestParam Map param,
			 			@RequestParam (required=false, defaultValue="")  String seq,
			 			@RequestParam (value="atchFileId", defaultValue="")  String atchFileId,
			 			@RequestParam (required=false, defaultValue="C1")  String contents_gubun
			 			
			 		
					) throws Exception{
		
		AdminUserVO adminUser = (AdminUserVO)request.getSession().getAttribute(PropUtil.get("session.admin"));
		
		JSONObject obj = new JSONObject();
				
		
		param.put("contents_gubun", contents_gubun);
		
		final Map<String, MultipartFile> files = multiRequest.getFileMap();
		
		int result = 0;
		List<FileVO> resultFile = null;
				
		MultipartFile file1 = (MultipartFile) multiRequest.getFile("file_0");
		MultipartFile file2 = (MultipartFile) multiRequest.getFile("file_1");
		MultipartFile file3 = (MultipartFile) multiRequest.getFile("file_2");
		MultipartFile file4 = (MultipartFile) multiRequest.getFile("file_3");
		MultipartFile file5 = (MultipartFile) multiRequest.getFile("file_4");
		
			
			if (file1 != null &&  !file1.isEmpty()) {
				
				if ( "".equals(atchFileId)){
					
					atchFileId = fileGnrService.getNextStringId();
					param.put("atchFileId", atchFileId);
					
					
					FileVO fvo =   FilesUtil.parseFileInfOne(file1, "FARM_", 0, atchFileId, "farm");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					
					FileVO fvo =  FilesUtil.parseFileInfOne(file1, "FARM_", 0, atchFileId, "farm");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					fileMngService.updateFileInfs(fileList);
				}
		
			}
			
			
			if (file2 != null &&  !file2.isEmpty()) {
				
				if ( "".equals(atchFileId)){
					
					atchFileId = fileGnrService.getNextStringId();
					param.put("atchFileId", atchFileId);

					
					FileVO fvo =   FilesUtil.parseFileInfOne(file2, "FARM_", 1, atchFileId, "farm");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					FileVO fvo =  FilesUtil.parseFileInfOne(file2, "FARM_", 1, atchFileId, "farm");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					fileMngService.updateFileInfs(fileList);
				}
		
			}
			
			
			if (file3 != null &&  !file3.isEmpty()) {
				
				if ( "".equals(atchFileId)){
					
					atchFileId = fileGnrService.getNextStringId();
					param.put("atchFileId", atchFileId);

					
					FileVO fvo =   FilesUtil.parseFileInfOne(file3, "FARM_", 2, atchFileId, "farm");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					FileVO fvo =  FilesUtil.parseFileInfOne(file3, "FARM_", 2, atchFileId, "farm");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					fileMngService.updateFileInfs(fileList);
				}
		
			}


			
			if (file4 != null &&  !file4.isEmpty()) {
				
				if ( "".equals(atchFileId)){
					
					atchFileId = fileGnrService.getNextStringId();
					param.put("atchFileId", atchFileId);

					
					FileVO fvo =   FilesUtil.parseFileInfOne(file4, "FARM_", 3, atchFileId, "farm");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					FileVO fvo =  FilesUtil.parseFileInfOne(file4, "FARM_", 3, atchFileId, "farm");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					fileMngService.updateFileInfs(fileList);
				}
		
			}
			
			if (file5 != null &&  !file5.isEmpty()) {
				
				if ( "".equals(atchFileId)){
					
					atchFileId = fileGnrService.getNextStringId();
					param.put("atchFileId", atchFileId);
					
					
					FileVO fvo =   FilesUtil.parseFileInfOne(file5, "FARM_", 4, atchFileId, "farm");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					FileVO fvo =  FilesUtil.parseFileInfOne(file5, "FARM_", 4, atchFileId, "farm");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					fileMngService.updateFileInfs(fileList);
				}
				
			}

			
			if( "".equals(seq)){	
				param.put("atch_file_id" , atchFileId);
				param.put("reg_user", adminUser.getId());
				result = contentsService.insertContents(param);
			 
			}else{
				
				result = contentsService.updateContents(param);
			}	
			
			
			
			
			
			
		
		if ( result > 0 ){
			obj.put("success", true);
		}else{
			obj.put("success", false);
		}
		return obj.toString();		
	}
	
}
