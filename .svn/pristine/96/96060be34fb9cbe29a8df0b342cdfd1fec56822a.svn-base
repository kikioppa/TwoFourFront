package culturelandFront.config.interceptor;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.mobile.device.Device;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import culturelandFront.core.util.PropUtil;
import culturelandFront.core.value.JavaScript;
import culturelandFront.service.LoginService;
import culturelandFront.vo.UserVO;

public class UserInterceptor extends HandlerInterceptorAdapter {

	private final Logger logger = Logger.getLogger(this.getClass());	
	
	private final LoginService loginService;
	
	public UserInterceptor(LoginService loginService) {
		this.loginService = loginService;
	}
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
		throws Exception {
//		logger.debug("<< user preHandle Method Execute >>");
		HttpSession session = request.getSession();
		Object object = session.getAttribute(PropUtil.get("session.user"));
		String getUri = request.getRequestURI();
		Device device = (Device)request.getAttribute("currentDevice");
		
		String userIp = getRemoteAddr(request);
		if(userIp.indexOf(":") > -1){
			userIp = userIp.substring(0, userIp.indexOf(":"));
		}
		
		//로그인이 필요한 서비스 로그인화면으로 리다이렉트
		if( (object == null || !(object instanceof UserVO)) 
				&& (getUri.indexOf("/myPage/") > -1 || getUri.indexOf("/inquiry/") > -1 || getUri.indexOf("/purchase/") > -1)) {
			
			if(device.isMobile()){
				response.sendRedirect("/m/member/login.do?url="+getUri);
			}else{
				response.sendRedirect("/member/login.do?url="+getUri);
			}			
			return false;
		}
		
		UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
		
//		if(object != null){
//			System.out.println("user dbehd : " + user.toString());
//			HashMap param = new HashMap();
//			param.put("memberNo", user.getMemberNo());
//			HashMap userInfo = (HashMap)loginService.selectUserInfo(param);
//			
//			System.out.println("userInfo : " + userInfo.toString());
//			
//			if("B".equals(userInfo.get("MEMBER_STAT"))){
//				response.sendRedirect("/member/blackLogout.do");
//				return false;
//			}
//		}
		
		request.setAttribute("user", user);
		
		
		
		return true;		 
	}
	
	@Override
	public void postHandle(	HttpServletRequest request, HttpServletResponse response,
			Object handler, ModelAndView modelAndView) throws Exception {
		
		//회원 이동 이력 쌓기
		HttpSession session = request.getSession();
		Object object = session.getAttribute(PropUtil.get("session.user"));
		
		if(object != null){
			UserVO user = (UserVO)request.getSession().getAttribute(PropUtil.get("session.user"));
			String getUri = request.getRequestURI();
			HashMap param = new HashMap();
			param.put("action", getUri);
			param.put("ip", getRemoteAddr(request));
			param.put("memberNo", user.getMemberNo());
			
			//블랙처리 시 자동로그아웃
//			HashMap userInfo = (HashMap)loginService.selectUserInfo(param);
//			
//			if("B".equals(userInfo.get("MEMBER_STAT"))){
//				response.sendRedirect("/member/blackLogout.do");
//			}
			
			loginService.insertUserPageHis(param);
		}
		//회원 이동 이력 쌓기 종료
	}
	
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response,
			Object handler, Exception ex) throws Exception {
		
	}
	
	public static String getRemoteAddr(HttpServletRequest request){
		String ip = null;
		
		ip = request.getHeader("X-Forwarded-For");
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	        ip = request.getHeader("Proxy-Client-IP");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	        ip = request.getHeader("WL-Proxy-Client-IP");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	        ip = request.getHeader("HTTP_CLIENT_IP");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	        ip = request.getHeader("HTTP_X_FORWARDED_FOR");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	    	ip = request.getHeader("X_Real-IP");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	    	ip = request.getHeader("X_RealIP");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	    	ip = request.getHeader("REMOTE_ADDR");
	    }
	    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
	        ip = request.getRemoteAddr();
	    }
	    
		return ip;
	}
	
}
	