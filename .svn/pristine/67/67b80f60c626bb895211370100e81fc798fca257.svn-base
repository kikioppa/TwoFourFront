package culturelandFront.controller.front.contents;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import culturelandFront.core.abstr.NdnAbstractController;
import culturelandFront.core.helper.ListHelper;
import culturelandFront.core.util.FilesUtil;
import culturelandFront.core.util.NdnUtil;
import culturelandFront.core.util.PropUtil;
import culturelandFront.service.CategoryService;
import culturelandFront.service.ContentsService;
import culturelandFront.service.FileMngService;
import culturelandFront.vo.AdminUserVO;
import culturelandFront.vo.FileVO;
import egovframework.rte.fdl.idgnr.EgovIdGnrService;

/**
 *
 * 컨텐츠 관리 > 안내장소
 * 
 **/
@Controller
@RequestMapping("/admin/contents/place")
public class PlaceController extends NdnAbstractController{

	private final Logger logger = Logger.getLogger(this.getClass());
	
	@Resource
	private ContentsService contentsService;
	
	@Resource
	private CategoryService categoryService;
	
	@Resource
	private FileMngService fileMngService;	
	
	
    /** fileGnrService */
    @Resource(name="fileGnrService")
    private EgovIdGnrService fileGnrService;
    
    
	
	/**
	 * 리스트 
	 * 
	 */
	@RequestMapping( "/list.do")
	public String list	(
						HttpServletRequest request
						, Model model
						, @RequestParam Map param) {
		
		ListHelper listHelper = new ListHelper(param, 15);
		listHelper = contentsService.selectPlaceListHelper(listHelper);
		
		
		model.addAttribute("listHelper", listHelper);	
		
		model.addAttribute("menu_id", "01");
		model.addAttribute("sub_menu_id", "04");
		
		return  "/admin/contents/place/list";
	}	

	
	
	/**
	 * 등록 및 수정 화면
	 * 
	 */
	@RequestMapping( "/write.do")
	public String write	(
						HttpServletRequest request
						, Model model
						, @RequestParam (required=false, defaultValue="")  String seq	
						
						, @RequestParam Map param) {
		
		
		if ( !"".equals(seq)){
			
			param.put("seq", seq);
			
			Map detail = contentsService.selectPlaceDetail(param);
			model.addAttribute("detail", detail);
			
		}
		
		
		model.addAttribute("menu_id", "01");
		model.addAttribute("sub_menu_id", "04");
		
		return  "/admin/contents/place/write";
	}	
	
	
	
	
	
	
	/**
	  * 글쓰기
	  */
	@RequestMapping(value="/write_proc.json")
	@ResponseBody
	public String write_proc( final MultipartHttpServletRequest multiRequest,
						ModelMap model,  
						HttpSession session, 
						HttpServletRequest request,
			 			@RequestParam Map param,
			 			@RequestParam (required=false, defaultValue="")  String seq,
			 			@RequestParam (value="atchFileId", defaultValue="")  String atchFileId, 
			 			@RequestParam (value="atchIconId", defaultValue="")  String atchIconId
			 			
			 		
					) throws Exception{
		
		AdminUserVO adminUser = (AdminUserVO)request.getSession().getAttribute(PropUtil.get("session.admin"));
		
		JSONObject obj = new JSONObject();
		
		final Map<String, MultipartFile> files = multiRequest.getFileMap();
		
		int result = 0;
		List<FileVO> resultFile = null;

		MultipartFile file1 = (MultipartFile) multiRequest.getFile("file_0");
		MultipartFile file2 = (MultipartFile) multiRequest.getFile("file_1");
		
			
			if (file1 != null &&  !file1.isEmpty()) {
				
				if ("".equals(atchFileId)){
					System.out.println("그냥 삽입");
					
					atchFileId = fileGnrService.getNextStringId();
					param.put("atchFileId", atchFileId);
					
					
					FileVO fvo =   FilesUtil.parseFileInfOne(file1, "PLACE_", 0, atchFileId, "place");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					
					FileVO fvo =  FilesUtil.parseFileInfOne(file1, "PLACE_", 0, atchFileId, "place");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					System.out.println("updateFileInfs");
					
					fileMngService.updateFileInfs(fileList);

					System.out.println("updateFileInfs 완료");
				}
		
			}
			
			if (file2 != null &&  !file2.isEmpty()) {
				
				if ("".equals(atchIconId)){
					
					atchIconId = fileGnrService.getNextStringId();
					param.put("atchIconId", atchIconId);
					
					
					FileVO fvo =   FilesUtil.parseFileInfOne(file2, "PLACE_ICON_", 1, atchIconId, "place_icon");
					
					fvo.setAtchIconId("Y");
					
					fileMngService.insertFileInf(fvo);
					
				}else{
					
					FileVO fvo =  FilesUtil.parseFileInfOne(file2, "PLACE_ICON_", 1, atchIconId, "place_icon");

					fvo.setAtchIconId("Y");
					
					List<FileVO> fileList = new ArrayList();
					fileList.add(fvo);
					
					fileMngService.updateFileInfs(fileList);
				}
		
			}

			
			if( "".equals(seq)){	
				param.put("atch_file_id" , atchFileId);
				param.put("atch_icon_id" , atchIconId);
				result = contentsService.insertPlace(param);
			 
			}else{
				
				result = contentsService.updatePlace(param);
			}	
			
			
			
			
			
			
		
		if ( result > 0 ){
			obj.put("success", true);
		}else{
			obj.put("success", false);
		}
		return obj.toString();		
	}
	
	
	
	
	
	
	
	/**
	  * 삭제
	  */
	@RequestMapping(value="/del_proc.json")
	@ResponseBody
	public String del_proc( 
						ModelMap model,  
						HttpSession session, 
						HttpServletRequest request,
			 			@RequestParam Map param,
			 			@RequestParam(value="seqArray",  defaultValue="") String[] seqArray,	// 여러개 삭제
			 			@RequestParam (value="seq", defaultValue="")  String seq	//단일 삭제
			 		
					) throws Exception{
		
		JSONObject obj = new JSONObject();
				
		int result = 0;
		
		if ( !"".equals(seq)){
			param.put("seq", seq);			
		}
		
		if ( seqArray.length > 0){
			param.put("seqArray", seqArray);			
		}
		
		if ( !"".equals(seq) ||  seqArray.length > 0){
			
			
			List list = new ArrayList();
			List<FileVO> fvoList = new ArrayList();
			
			if ( !"".equals(seq) ){
				Map detail = contentsService.selectPlaceDetail(param);
				list.add(detail);
					
			}else{		
				param.put("startNum", 0);
				param.put("endNum", 99999);
				list = contentsService.selectPlaceList(param);
				
			}
			
			
			for(int i=0;i<list.size();i++){
				Map detail = (Map) list.get(i);
				String atch_file_id = NdnUtil.checkNull(detail.get("atch_file_id") );
				
				if ( !"".equals(atch_file_id)){
					FileVO fvo = new FileVO();
					fvo.setAtchFileId( atch_file_id);
					fvoList.add(fvo);
				}
				
			}
			
			fileMngService.deleteFileInfs(fvoList);
			
			result = contentsService.deletePlace(param);
			
		}
		
		
		if ( result > 0 ){
			obj.put("success", true);
		}else{
			obj.put("success", false);
		}
		return obj.toString();		
	}
	
}
